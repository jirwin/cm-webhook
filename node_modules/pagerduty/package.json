{
  "author": {
    "name": "Karl Skomski",
    "email": "karl@skomski.com"
  },
  "name": "pagerduty",
  "description": "A node.js client for PagerDuty",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/skomski/node-pagerduty.git"
  },
  "main": "./index",
  "scripts": {
    "test": "coffee test/test-PagerDuty.coffee"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "request": "~2.9.3"
  },
  "devDependencies": {
    "coffee-script": "~1.2.0"
  },
  "readme": "# pagerduty\n\nA node.js client for PagerDuty.\n\n## Install\n\n```\nnpm install pagerduty\n```\n\n## Methods\n\n### constructor(options)\n  * Required:\n    * `serviceKey` - The GUID of one of your “Generic API” services. This is the “service key” listed on a Generic API’s service detail page.\n\n### create(options)\n  * Required:\n    * `description` - A short description of the problem that led to this trigger.\n  * Optional:\n    * `details` - An arbitrary JSON object containing any data you’d like included in the incident log.\n    * `incidentKey` - Identifies the incident to which this trigger event should be applied.\n    * `callback` - A Callback with two arguments `(err, response)`\n\n### acknowledge(options)\n  * Required:\n    * `incidentKey` - Identifies the incident to which this trigger event should be applied.\n  * Optional:\n    * `details` - An arbitrary JSON object containing any data you’d like included in the incident log.\n    * `description` - Text that will appear in the incident’s log associated with this event.\n    * `callback` - A Callback with two arguments `(err, response)`\n\n### resolve(options)\n  * Required:\n    * `incidentKey` - Identifies the incident to which this trigger event should be applied.\n  * Optional:\n    * `details` - An arbitrary JSON object containing any data you’d like included in the incident log.\n    * `description` - Text that will appear in the incident’s log associated with this event.\n    * `callback` - A Callback with two arguments `(err, response)`\n\n### Example response\n\n```json\n{ \n  status: 'success',\n  incident_key: '87fb80301f99012f961a1231381bc5dc',\n  message: 'Event processed'\n}\n```\n\n## Usage\n\n```javascript\nvar pager, PagerDuty;\n\nPagerDuty = require('pagerduty');\n\npager = new PagerDuty({\n  serviceKey: '12345678901234567890123456789012' // required\n});\n\npager.create({\n  description: 'testError', // required\n  details: {\n    foo: 'bar'\n  },\n  callback: function(err, response) {\n    if (err) throw err;\n\n    pager.acknowledge({\n      incidentKey: response.incident_key, // required\n      description: 'Got the test error!',\n      details: {\n        foo: 'bar'\n      },\n      callback: function(err, response) {\n        if (err) throw err;\n\n        pager.resolve({\n          incidentKey: response.incident_key, // required\n          description: 'Resolved the test error!',\n          details: {\n            foo: 'bar'\n          },\n          callback: function(err, response) {\n            if (err) throw err;\n          }\n        });\n      }\n    });\n  }\n});\n```\n\n## License\n\nLicensed under the MIT license.\n",
  "_id": "pagerduty@0.0.3",
  "dist": {
    "shasum": "119c32fad6b30c49c11e5d032e760d14927b9f58"
  },
  "_from": "pagerduty"
}
